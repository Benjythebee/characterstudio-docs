"use strict";(self.webpackChunkcharacterstudio_docs=self.webpackChunkcharacterstudio_docs||[]).push([[9962],{9098:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var o=t(4848),s=t(8453);const c={},a="View",i={id:"Developers/Pages/view",title:"View",description:"The View component is a part of a React application that handles the user interface for a chat feature. It uses various contexts to manage state and behavior, such as view mode, sound, audio, and language settings. The component also controls a microphone feature and speech recognition. In layman's terms, this component is like the control center for a chat room where users can interact with each other, and it manages how the chat room looks, sounds, and behaves.",source:"@site/docs/Developers/Pages/view.md",sourceDirName:"Developers/Pages",slug:"/Developers/Pages/view",permalink:"/characterstudio-docs/docs/Developers/Pages/view",draft:!1,unlisted:!1,editUrl:"https://github.com/m3-org/characterstudio-docs/tree/main/docs/Developers/Pages/view.md",tags:[],version:"current",lastUpdatedBy:"madjin",lastUpdatedAt:1708577163,formattedLastUpdatedAt:"Feb 22, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bio",permalink:"/characterstudio-docs/docs/Developers/Pages/bio"},next:{title:"Mint",permalink:"/characterstudio-docs/docs/Developers/Pages/mint"}},r={},d=[];function l(e){const n={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"view",children:"View"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"View"})," component is a part of a React application that handles the user interface for a chat feature. It uses various contexts to manage state and behavior, such as view mode, sound, audio, and language settings. The component also controls a microphone feature and speech recognition. In layman's terms, this component is like the control center for a chat room where users can interact with each other, and it manages how the chat room looks, sounds, and behaves."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Imports"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx!",children:'import React, { useContext } from "react"\nimport styles from "./View.module.css"\nimport { ViewMode, ViewContext } from "../context/ViewContext"\nimport Chat from "../components/Chat"\nimport CustomButton from "../components/custom-button"\nimport { LanguageContext } from "../context/LanguageContext"\nimport { SoundContext } from "../context/SoundContext"\nimport { AudioContext } from "../context/AudioContext"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The component imports necessary modules, styles, and contexts. ",(0,o.jsx)(n.code,{children:"useContext"})," is a React hook that allows the component to access the state and functions provided by the imported contexts."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Component Function"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx!",children:"function View({templateInfo}) {\n  ...\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"View"})," component receives ",(0,o.jsx)(n.code,{children:"templateInfo"})," as a prop."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"State and Context"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx!",children:"const { setViewMode } = React.useContext(ViewContext)\nconst [micEnabled, setMicEnabled] = React.useState(false)\nconst [speechRecognition, setSpeechRecognition] = React.useState(false)\nconst { playSound } = React.useContext(SoundContext)\nconst { isMute } = React.useContext(AudioContext)\nconst { t } = useContext(LanguageContext);\n"})}),"\n",(0,o.jsx)(n.p,{children:"The component uses several pieces of state and context:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setViewMode"}),": A function from ",(0,o.jsx)(n.code,{children:"ViewContext"})," to change the view mode."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"micEnabled"})," and ",(0,o.jsx)(n.code,{children:"setMicEnabled"}),": State variables to manage the microphone status."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"speechRecognition"})," and ",(0,o.jsx)(n.code,{children:"setSpeechRecognition"}),": State variables to manage the speech recognition status."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"playSound"}),": A function from ",(0,o.jsx)(n.code,{children:"SoundContext"})," to play a sound."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"isMute"}),": A state variable from ",(0,o.jsx)(n.code,{children:"AudioContext"})," to check if the audio is muted."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"t"}),": A function from ",(0,o.jsx)(n.code,{children:"LanguageContext"})," to translate text."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Back Function"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx!",children:"const back = () => {\n  setViewMode(ViewMode.SAVE)\n  !isMute && playSound('backNextButton');\n  if (speechRecognition)\n    speechRecognition.stop()\n  setMicEnabled(false)\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"back"})," function changes the view mode to ",(0,o.jsx)(n.code,{children:"SAVE"}),", plays a sound if audio is not muted, stops speech recognition if it's active, and disables the microphone."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Render"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"return (\n  ...\n)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The component renders a chat interface with a title, a ",(0,o.jsx)(n.code,{children:"Chat"})," component, and a ",(0,o.jsx)(n.code,{children:"CustomButton"})," component. The ",(0,o.jsx)(n.code,{children:"Chat"})," component receives several props related to the microphone and speech recognition. The ",(0,o.jsx)(n.code,{children:"CustomButton"})," component is configured to act as a back button."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Export"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"export default View\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"View"})," component is exported for use in other parts of the application."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const s={},c=o.createContext(s);function a(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);