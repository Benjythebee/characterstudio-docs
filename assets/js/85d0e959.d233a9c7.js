"use strict";(self.webpackChunkcharacterstudio_docs=self.webpackChunkcharacterstudio_docs||[]).push([[1802],{7296:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=n(4848),a=n(8453);const s={},i="Landing",r={id:"Developers/Pages/landing",title:"Landing",description:"The Landing component is a part of a React application that serves as the landing page. It provides the user with options to create, optimize, or load a character. Each option is represented by a button, and clicking on these buttons triggers different actions. The component also interacts with various contexts to manage the application's state and play sounds based on user interactions.",source:"@site/docs/Developers/Pages/landing.md",sourceDirName:"Developers/Pages",slug:"/Developers/Pages/landing",permalink:"/characterstudio-docs/docs/Developers/Pages/landing",draft:!1,unlisted:!1,editUrl:"https://github.com/m3-org/characterstudio-docs/tree/main/docs/Developers/Pages/landing.md",tags:[],version:"current",lastUpdatedBy:"madjin",lastUpdatedAt:1708577163,formattedLastUpdatedAt:"Feb 22, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create",permalink:"/characterstudio-docs/docs/Developers/Pages/create"},next:{title:"Load",permalink:"/characterstudio-docs/docs/Developers/Pages/load"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"landing",children:"Landing"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Landing"})," component is a part of a React application that serves as the landing page. It provides the user with options to create, optimize, or load a character. Each option is represented by a button, and clicking on these buttons triggers different actions. The component also interacts with various contexts to manage the application's state and play sounds based on user interactions."]}),"\n",(0,o.jsx)(t.p,{children:"Think of this code as the main menu of a video game. When you start the game, you see options to create a new character, optimize an existing one, or load a previously saved character. Each option is a button you can click. When you click a button, the game changes to the appropriate mode (create, optimize, or load), and a sound plays if the game's sound is turned on."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Import Statements"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx!",children:'import React from "react"\nimport styles from "./Landing.module.css"\nimport { ViewMode, ViewContext } from "../context/ViewContext"\nimport { SoundContext } from "../context/SoundContext"\nimport { AudioContext } from "../context/AudioContext"\n'})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"React"})," is the base library. ",(0,o.jsx)(t.code,{children:"styles"})," is a CSS module for styling the component. ",(0,o.jsx)(t.code,{children:"ViewContext"}),", ",(0,o.jsx)(t.code,{children:"SoundContext"}),", and ",(0,o.jsx)(t.code,{children:"AudioContext"})," are React contexts used for managing the application's state."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Function Definitions"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx!",children:"function Landing() {\n  const { setViewMode } = React.useContext(ViewContext)\n  const { playSound } = React.useContext(SoundContext)\n  const { isMute } = React.useContext(AudioContext)\n\n  const createCharacter = () => {\n    setViewMode(ViewMode.CREATE)\n    !isMute && playSound('backNextButton');\n  }\n\n  const optimizeCharacter = () => {\n    setViewMode(ViewMode.OPTIMIZER)\n    !isMute && playSound('backNextButton');\n  }\n\n  const loadCharacter = () => {\n    setViewMode(ViewMode.LOAD)\n    !isMute && playSound('backNextButton');\n  }\n  ...\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Landing"})," function is the main component function. It uses the ",(0,o.jsx)(t.code,{children:"useContext"})," hook to access the methods and values from the imported contexts. Three helper functions (",(0,o.jsx)(t.code,{children:"createCharacter"}),", ",(0,o.jsx)(t.code,{children:"optimizeCharacter"}),", ",(0,o.jsx)(t.code,{children:"loadCharacter"}),") are defined to handle button clicks. Each function sets a different view mode and plays a sound if the application is not muted."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Render Method"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx!",children:'  return (\n    <div className={styles.container}>\n      <div className={styles.buttonContainer}>\n        <button className={styles.button} onClick={createCharacter}>\n          <img src="/assets/media/btn_create_character.png" />\n        </button>\n        <button className={styles.button} onClick={optimizeCharacter}>\n          <img src="/assets/media/btn_optimize_character.png" />\n        </button>\n        {/*\n        <button className={styles.button}\n            onClick={\n                loadCharacter\n            }><img src=\'/assets/media/btn_load_character.png\' /></button>\n            */}\n      </div>\n    </div>\n  )\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The render method returns the JSX to be rendered. It includes a container ",(0,o.jsx)(t.code,{children:"div"})," with two buttons for creating and optimizing characters. The button for loading a character is currently commented out."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(6540);const a={},s=o.createContext(a);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);