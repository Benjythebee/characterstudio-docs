"use strict";(self.webpackChunkcharacterstudio_docs=self.webpackChunkcharacterstudio_docs||[]).push([[443],{3404:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(4848),n=t(8453);const i={},d="Character Manager",l={id:"Developers/Managers/character-manager",title:"Character Manager",description:"Character Manager is the main manager for the character studio, it provides functions to load manifests and traits within your three.js application",source:"@site/docs/Developers/Managers/character-manager.md",sourceDirName:"Developers/Managers",slug:"/Developers/Managers/character-manager",permalink:"/characterstudio-docs/docs/Developers/Managers/character-manager",draft:!1,unlisted:!1,editUrl:"https://github.com/m3-org/characterstudio-docs/tree/main/docs/Developers/Managers/character-manager.md",tags:[],version:"current",lastUpdatedBy:"memelotsqui",lastUpdatedAt:1709269546,formattedLastUpdatedAt:"Mar 1, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/characterstudio-docs/docs/Developers/overview"},next:{title:"Animation Manager",permalink:"/characterstudio-docs/docs/Developers/Managers/animation-manager"}},o={},s=[{value:"Constructor",id:"constructor",level:2},{value:"CharacterManager( parameters : Object )",id:"charactermanager-parameters--object-",level:3},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>update()</code>",id:"update",level:3},{value:"<code>addLookAtMouse(screenPrecentage, canvasID, camera, enable = true)</code>",id:"addlookatmousescreenprecentage-canvasid-camera-enable--true",level:3},{value:"<code>toggleCharacterLookAtMouse(enable)</code>",id:"togglecharacterlookatmouseenable",level:3},{value:"<code>savePortraitScreenshot(name, width, height, distance = 1, headHeightOffset = 0)</code>",id:"saveportraitscreenshotname-width-height-distance--1-headheightoffset--0",level:3},{value:"<code>cameraRaycastCulling(mouseX, mouseY, removeFace = true)</code>",id:"cameraraycastcullingmousex-mousey-removeface--true",level:3},{value:"<code>removeCurrentCharacter()</code>",id:"removecurrentcharacter",level:3},{value:"<code>removeCurrentManifest()</code>",id:"removecurrentmanifest",level:3},{value:"<code>canDownload()</code>",id:"candownload",level:3},{value:"<code>downloadVRM(name, exportOptions = null)</code>",id:"downloadvrmname-exportoptions--null",level:3},{value:"<code>downloadGLB(name, exportOptions = null)</code>",id:"downloadglbname-exportoptions--null",level:3},{value:"<code>getAvatarSelection()</code>",id:"getavatarselection",level:3},{value:"<code>getGroupTraits()*</code>",id:"getgrouptraits",level:3},{value:"<code>getCurrentCharacterModel()</code>",id:"getcurrentcharactermodel",level:3},{value:"<code>isTraitGroupRequired(groupTraitID)</code>",id:"istraitgrouprequiredgrouptraitid",level:3},{value:"<code>getTraits(groupTraitID)</code>",id:"gettraitsgrouptraitid",level:3},{value:"<code>getCurrentTraitID(groupTraitID)</code>",id:"getcurrenttraitidgrouptraitid",level:3},{value:"<code>getCurrentTraitData(groupTraitID)</code>",id:"getcurrenttraitdatagrouptraitid",level:3},{value:"<code>getCurrentTraitVRM(groupTraitID)*</code>",id:"getcurrenttraitvrmgrouptraitid",level:3},{value:"<code>setParentModel(model)</code>",id:"setparentmodelmodel",level:3},{value:"<code>setRenderCamera(camera)</code>",id:"setrendercameracamera",level:3},{value:"<code>loadRandomTraits()</code>",id:"loadrandomtraits",level:3},{value:"<code>loadRandomTrait(groupTraitID)</code>",id:"loadrandomtraitgrouptraitid",level:3},{value:"<code>loadTraitsFromNFT(url, fullAvatarReplace = true, ignoreGroupTraits = null)*</code>",id:"loadtraitsfromnfturl-fullavatarreplace--true-ignoregrouptraits--null",level:3},{value:"<code>loadTraitsFromNFTObject(NFTObject, fullAvatarReplace = true, ignoreGroupTraits = null)</code>",id:"loadtraitsfromnftobjectnftobject-fullavatarreplace--true-ignoregrouptraits--null",level:3},{value:"<code>loadInitialTraits()*</code>",id:"loadinitialtraits",level:3},{value:"<code>loadAllTraits()</code>",id:"loadalltraits",level:3},{value:"<code>loadTrait(groupTraitID, traitID)</code>",id:"loadtraitgrouptraitid-traitid",level:3},{value:"<code>loadCustomTrait(groupTraitID, url)</code>",id:"loadcustomtraitgrouptraitid-url",level:3},{value:"<code>loadCustomTexture(groupTraitID, url)</code>",id:"loadcustomtexturegrouptraitid-url",level:3},{value:"<code>setTraitColor(groupTraitID, hexColor)</code>",id:"settraitcolorgrouptraitid-hexcolor",level:3},{value:"<code>removeTrait(groupTraitID, forceRemove = false)</code>",id:"removetraitgrouptraitid-forceremove--false",level:3},{value:"<code>updateCullHiddenMeshes()</code>",id:"updatecullhiddenmeshes",level:3},{value:"<code>loadOptimizerManifest()</code>",id:"loadoptimizermanifest",level:3},{value:"<code>getCurrentOptimizerCharacterModel()</code>",id:"getcurrentoptimizercharactermodel",level:3},{value:"<code>loadOptimizerCharacter(url)</code>",id:"loadoptimizercharacterurl",level:3},{value:"<code>setManifest(manifest)</code>",id:"setmanifestmanifest",level:3},{value:"<code>appendManifest(manifest, replaceExisting)</code>",id:"appendmanifestmanifest-replaceexisting",level:3},{value:"<code>loadManifest(url)</code>",id:"loadmanifesturl",level:3},{value:"<code>loadAppendManifest(url, replaceExisting)*</code>",id:"loadappendmanifesturl-replaceexisting",level:3}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h1,{id:"character-manager",children:"Character Manager"}),"\n",(0,a.jsx)(r.p,{children:"Character Manager is the main manager for the character studio, it provides functions to load manifests and traits within your three.js application"}),"\n",(0,a.jsx)(r.h2,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsx)(r.h3,{id:"charactermanager-parameters--object-",children:"CharacterManager( parameters : Object )"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.strong,{children:"parameters"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"(optional) an object with one or more properties defining the initial setup nfor the characterManager instance."}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"parentModel"})," : The target Three js Object3D that."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"renderCamera"})," : Required if want to be able to allow manual face culling, so user can click to hide or show hidden faces with mouse click."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"manifestURL"})," : Optional initial manifest to be loaded with the character manager."]}),"\n",(0,a.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".rootModel : Object3D"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"root model that will hold all the character related elements and additional data that is not required to download with the character"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".characterModel : Object3D"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"Models specifically used for the character model, additional decoration or environment elements are not included in this object"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".parentModel : Object3D"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"Parent model that can be provided by the user were the root model will be loaded. Parent model may include additional decoration elements."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".lipSync : LipSync"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"A lip sync manager to allow an easy way to play audio into the character."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".lookAtManager : LookAtManager"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"A look at manager to allow character follow mouse position in the screen."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".animationManager : AnimationManager"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"Animation manager to load and play different animations, it coordinates and plays the animation for all loaded traits."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".screenshotManager : ScreenshotManager"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"A screenshot manager to take pictures of the character in different angles."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".blinkManager : BlinkManager"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"A blink manager to coordinate blink animation in all loaded traits"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".renderCamera : Camera"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"Render camera used in the three js scene where user sees the character. Its only needed if you want to allow the user to allow manual face culling."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".manifestData : CharacterManifestData"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"The character manifest data Class object that allows to fetch screenshots, urls, layers textures etc. from the loaded manifest.json. Its a class that has the final processed data in an easier way to read for the characterManager."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".avatar : Object"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"Different from characterModel, this object holds information of the loaded character, such as loaded trait names, trait IDs and models."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".traitLoadManager : TraitLoadingManager"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"Custom Loader class to load one or multiple traits into the current character"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.code,{children:".vrmHelperRoot : Group"})}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"VRM helper root object to help with debugging colliders and spring bones (wip)"}),"\n",(0,a.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(r.h3,{id:"update",children:(0,a.jsx)(r.code,{children:"update()"})}),"\n",(0,a.jsx)(r.p,{children:"Must be called within you update function in three js to update LookAt Manager."}),"\n",(0,a.jsx)(r.h3,{id:"addlookatmousescreenprecentage-canvasid-camera-enable--true",children:(0,a.jsx)(r.code,{children:"addLookAtMouse(screenPrecentage, canvasID, camera, enable = true)"})}),"\n",(0,a.jsx)(r.p,{children:"Adds a LookAtManager for mouse interaction."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"screenPrecentage"}),": Percentage of the screen area to consider for mouse interaction."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"canvasID"}),": The ID of the canvas element."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"camera"}),": The camera used in the scene."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"enable"}),": Optional parameter to enable/disable the mouse interaction (default is true)."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"togglecharacterlookatmouseenable",children:(0,a.jsx)(r.code,{children:"toggleCharacterLookAtMouse(enable)"})}),"\n",(0,a.jsx)(r.p,{children:"Toggles character lookAt mouse interaction."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"enable"}),": Boolean value to enable/disable character lookAt mouse interaction."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"saveportraitscreenshotname-width-height-distance--1-headheightoffset--0",children:(0,a.jsx)(r.code,{children:"savePortraitScreenshot(name, width, height, distance = 1, headHeightOffset = 0)"})}),"\n",(0,a.jsx)(r.p,{children:"Saves a portrait screenshot."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"name"}),": The name of the screenshot."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"width"}),": The width of the screenshot."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"height"}),": The height of the screenshot."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"distance"}),": Optional parameter for camera distance (default is 1)."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"headHeightOffset"}),": Optional parameter for head height offset (default is 0)."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"cameraraycastcullingmousex-mousey-removeface--true",children:(0,a.jsx)(r.code,{children:"cameraRaycastCulling(mouseX, mouseY, removeFace = true)"})}),"\n",(0,a.jsx)(r.p,{children:"Performs camera raycast culling."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"mouseX"}),": X-coordinate of the mouse."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"mouseY"}),": Y-coordinate of the mouse."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"removeFace"}),": Optional parameter to remove faces (default is true)."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"removecurrentcharacter",children:(0,a.jsx)(r.code,{children:"removeCurrentCharacter()"})}),"\n",(0,a.jsx)(r.p,{children:"Removes the current character."}),"\n",(0,a.jsx)(r.h3,{id:"removecurrentmanifest",children:(0,a.jsx)(r.code,{children:"removeCurrentManifest()"})}),"\n",(0,a.jsx)(r.p,{children:"Removes the current manifest, character, and associated animations."}),"\n",(0,a.jsx)(r.h3,{id:"candownload",children:(0,a.jsx)(r.code,{children:"canDownload()"})}),"\n",(0,a.jsx)(r.p,{children:"Checks if downloading is supported based on manifest data."}),"\n",(0,a.jsx)(r.h3,{id:"downloadvrmname-exportoptions--null",children:(0,a.jsx)(r.code,{children:"downloadVRM(name, exportOptions = null)"})}),"\n",(0,a.jsx)(r.p,{children:"Downloads the VRM file."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"name"}),": The name of the VRM file."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"exportOptions"}),": Additional export options (optional)."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"downloadglbname-exportoptions--null",children:(0,a.jsx)(r.code,{children:"downloadGLB(name, exportOptions = null)"})}),"\n",(0,a.jsx)(r.p,{children:"Downloads the GLB file."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"name"}),": The name of the GLB file."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"exportOptions"}),": Additional export options (optional)."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"getavatarselection",children:(0,a.jsx)(r.code,{children:"getAvatarSelection()"})}),"\n",(0,a.jsx)(r.p,{children:"Gets information about the avatar selection."}),"\n",(0,a.jsx)(r.h3,{id:"getgrouptraits",children:(0,a.jsx)(r.code,{children:"getGroupTraits()*"})}),"\n",(0,a.jsx)(r.p,{children:"Gets traits associated with the group from the manifest data."}),"\n",(0,a.jsx)(r.h3,{id:"getcurrentcharactermodel",children:(0,a.jsx)(r.code,{children:"getCurrentCharacterModel()"})}),"\n",(0,a.jsx)(r.p,{children:"Gets the current character model."}),"\n",(0,a.jsx)(r.h3,{id:"istraitgrouprequiredgrouptraitid",children:(0,a.jsx)(r.code,{children:"isTraitGroupRequired(groupTraitID)"})}),"\n",(0,a.jsx)(r.p,{children:"Checks if a trait group is marked as required in the manifest data."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"gettraitsgrouptraitid",children:(0,a.jsx)(r.code,{children:"getTraits(groupTraitID)"})}),"\n",(0,a.jsx)(r.p,{children:"Gets traits for a specific group from the manifest data."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"getcurrenttraitidgrouptraitid",children:(0,a.jsx)(r.code,{children:"getCurrentTraitID(groupTraitID)"})}),"\n",(0,a.jsx)(r.p,{children:"Gets the ID of the current trait for a specific group."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"getcurrenttraitdatagrouptraitid",children:(0,a.jsx)(r.code,{children:"getCurrentTraitData(groupTraitID)"})}),"\n",(0,a.jsx)(r.p,{children:"Gets data for the current trait of a specific group."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"getcurrenttraitvrmgrouptraitid",children:(0,a.jsx)(r.code,{children:"getCurrentTraitVRM(groupTraitID)*"})}),"\n",(0,a.jsx)(r.p,{children:"Gets the VRM model for the current trait of a specific group."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"setparentmodelmodel",children:(0,a.jsx)(r.code,{children:"setParentModel(model)"})}),"\n",(0,a.jsx)(r.p,{children:"Sets the parent model for the character manager."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"model"}),": The parent model to be set."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"setrendercameracamera",children:(0,a.jsx)(r.code,{children:"setRenderCamera(camera)"})}),"\n",(0,a.jsx)(r.p,{children:"Sets the render camera for the character manager."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"camera"}),": The camera to be set."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadrandomtraits",children:(0,a.jsx)(r.code,{children:"loadRandomTraits()"})}),"\n",(0,a.jsx)(r.p,{children:"Loads random traits based on manifest data."}),"\n",(0,a.jsx)(r.h3,{id:"loadrandomtraitgrouptraitid",children:(0,a.jsx)(r.code,{children:"loadRandomTrait(groupTraitID)"})}),"\n",(0,a.jsx)(r.p,{children:"Loads a random trait for a specific group based on manifest data."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadtraitsfromnfturl-fullavatarreplace--true-ignoregrouptraits--null",children:(0,a.jsx)(r.code,{children:"loadTraitsFromNFT(url, fullAvatarReplace = true, ignoreGroupTraits = null)*"})}),"\n",(0,a.jsx)(r.p,{children:"Loads traits from an NFT using the specified URL."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"url"}),": The URL of the NFT."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"fullAvatarReplace"}),": Flag indicating whether to fully replace existing traits (default is true)."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"ignoreGroupTraits"}),": Optional array of trait groups to ignore."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadtraitsfromnftobjectnftobject-fullavatarreplace--true-ignoregrouptraits--null",children:(0,a.jsx)(r.code,{children:"loadTraitsFromNFTObject(NFTObject, fullAvatarReplace = true, ignoreGroupTraits = null)"})}),"\n",(0,a.jsx)(r.p,{children:"Loads traits from an NFT object metadata into the avatar."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"NFTObject"}),": The NFT object containing traits information."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"fullAvatarReplace"}),": Indicates whether to replace all avatar traits (default is true)."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"ignoreGroupTraits"}),": Optional array of trait groups to ignore."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadinitialtraits",children:(0,a.jsx)(r.code,{children:"loadInitialTraits()*"})}),"\n",(0,a.jsx)(r.p,{children:"Loads initial traits based on manifest data."}),"\n",(0,a.jsx)(r.h3,{id:"loadalltraits",children:(0,a.jsx)(r.code,{children:"loadAllTraits()"})}),"\n",(0,a.jsx)(r.p,{children:"Loads all traits based on manifest data."}),"\n",(0,a.jsx)(r.h3,{id:"loadtraitgrouptraitid-traitid",children:(0,a.jsx)(r.code,{children:"loadTrait(groupTraitID, traitID)"})}),"\n",(0,a.jsx)(r.p,{children:"Loads a specific trait based on group and trait IDs."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"traitID"}),": The ID of the specific trait."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadcustomtraitgrouptraitid-url",children:(0,a.jsx)(r.code,{children:"loadCustomTrait(groupTraitID, url)"})}),"\n",(0,a.jsx)(r.p,{children:"Loads a custom trait based on group and URL."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"url"}),": The URL associated with the custom trait."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadcustomtexturegrouptraitid-url",children:(0,a.jsx)(r.code,{children:"loadCustomTexture(groupTraitID, url)"})}),"\n",(0,a.jsx)(r.p,{children:"Loads a custom texture to the specified group trait's model."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the group trait."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"url"}),": The URL of the custom texture."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"settraitcolorgrouptraitid-hexcolor",children:(0,a.jsx)(r.code,{children:"setTraitColor(groupTraitID, hexColor)"})}),"\n",(0,a.jsx)(r.p,{children:"Sets the color of a specified group trait's model."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the group trait."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"hexColor"}),": The hexadecimal color value to set for the group trait's model."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"removetraitgrouptraitid-forceremove--false",children:(0,a.jsx)(r.code,{children:"removeTrait(groupTraitID, forceRemove = false)"})}),"\n",(0,a.jsx)(r.p,{children:"Removes a trait from the character."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"groupTraitID"}),": The ID of the trait group."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"forceRemove"}),": Optional parameter to force removal (default is false)."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"updatecullhiddenmeshes",children:(0,a.jsx)(r.code,{children:"updateCullHiddenMeshes()"})}),"\n",(0,a.jsx)(r.p,{children:"Updates the culling of hidden meshes."}),"\n",(0,a.jsx)(r.h3,{id:"loadoptimizermanifest",children:(0,a.jsx)(r.code,{children:"loadOptimizerManifest()"})}),"\n",(0,a.jsx)(r.p,{children:"Loads an optimizer manifest for the character."}),"\n",(0,a.jsx)(r.h3,{id:"getcurrentoptimizercharactermodel",children:(0,a.jsx)(r.code,{children:"getCurrentOptimizerCharacterModel()"})}),"\n",(0,a.jsx)(r.p,{children:"Gets the current VRM model for the optimizer character."}),"\n",(0,a.jsx)(r.h3,{id:"loadoptimizercharacterurl",children:(0,a.jsx)(r.code,{children:"loadOptimizerCharacter(url)"})}),"\n",(0,a.jsx)(r.p,{children:"Loads an optimized character based on a custom trait URL."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"url"}),": The URL associated with the custom trait."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"setmanifestmanifest",children:(0,a.jsx)(r.code,{children:"setManifest(manifest)"})}),"\n",(0,a.jsx)(r.p,{children:"Sets an existing manifest data for the character."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"manifest"}),": The loaded manifest object."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"appendmanifestmanifest-replaceexisting",children:(0,a.jsx)(r.code,{children:"appendManifest(manifest, replaceExisting)"})}),"\n",(0,a.jsx)(r.p,{children:"Appends manifest data to the current manifest."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"manifest"}),": The manifest to append."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"replaceExisting"}),": Boolean value indicating whether to replace existing manifest data."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadmanifesturl",children:(0,a.jsx)(r.code,{children:"loadManifest(url)"})}),"\n",(0,a.jsx)(r.p,{children:"Loads the manifest data for the character."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"url"}),": The URL of the manifest."]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"loadappendmanifesturl-replaceexisting",children:(0,a.jsx)(r.code,{children:"loadAppendManifest(url, replaceExisting)*"})}),"\n",(0,a.jsx)(r.p,{children:"Loads manifest data and appends it to the current manifest."}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"url"}),": The URL of the manifest."]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"replaceExisting"}),": Boolean value indicating whether to replace existing manifest data."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>l});var a=t(6540);const n={},i=a.createContext(n);function d(e){const r=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),a.createElement(i.Provider,{value:r},e.children)}}}]);